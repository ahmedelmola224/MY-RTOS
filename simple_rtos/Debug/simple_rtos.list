
simple_rtos.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d54  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000e84  08000e84  00010e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e9c  08000e9c  00010ea4  2**0
                  CONTENTS
  4 .ARM          00000000  08000e9c  08000e9c  00010ea4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e9c  08000ea4  00010ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e9c  08000e9c  00010e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ea0  08000ea0  00010ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000000  08000ea4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08000ea4  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ea4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000226d  00000000  00000000  00010ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007a1  00000000  00000000  0001313a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b8  00000000  00000000  000138e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000170  00000000  00000000  00013a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b34  00000000  00000000  00013c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001476  00000000  00000000  0001673c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000d505  00000000  00000000  00017bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000250b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  00025134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e6c 	.word	0x08000e6c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e6c 	.word	0x08000e6c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "CortexMx_porting.h"
#include "core_cm3.h"


void HardFault_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:
}


__attribute((naked)) void SVC_Handler(void)
{
	__asm("TST lr,#0x4 \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 ba2d 	b.w	80006a0 <OS_voidSVC>
			"ITE EQ \n\t"
			"MRSEQ r0,MSP \n\t"
			"MRSNE r0,PSP \n\t"
			"B OS_voidSVC");
}
 8000246:	bf00      	nop

08000248 <CORTEXMXPORTING_voidIssuePendSv>:




void CORTEXMXPORTING_voidIssuePendSv()
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <CORTEXMXPORTING_voidIssuePendSv+0x18>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a03      	ldr	r2, [pc, #12]	; (8000260 <CORTEXMXPORTING_voidIssuePendSv+0x18>)
 8000252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000256:	6053      	str	r3, [r2, #4]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <CORTEXMXPORTING_voidStartSystick>:

void CORTEXMXPORTING_voidStartSystick(u32 ticks)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	SysTick_Config(ticks);
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f7ff ffb3 	bl	80001d8 <SysTick_Config>
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <CORTEXMXPORTING_voidInit>:

void CORTEXMXPORTING_voidInit()
{
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0
	/*init clock tree (systick 8 MHZ) */

	/*make the pendsv priorty less than systick*/
	__NVIC_SetPriority(PendSV_IRQn, 15);
 800027e:	210f      	movs	r1, #15
 8000280:	f06f 0001 	mvn.w	r0, #1
 8000284:	f7ff ff7e 	bl	8000184 <__NVIC_SetPriority>

}
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}

0800028c <FIFO_init>:

#include "Fifo.h"

Fifo_Buffer_Status FIFO_init(Fifo_Buffer_t* fifo,element_t* buff,u32 length)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	60f8      	str	r0, [r7, #12]
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	607a      	str	r2, [r7, #4]
	if(!buff )
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d101      	bne.n	80002a2 <FIFO_init+0x16>
			return FIFO_NULL;
 800029e:	2303      	movs	r3, #3
 80002a0:	e011      	b.n	80002c6 <FIFO_init+0x3a>

		fifo->base = buff ;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	68ba      	ldr	r2, [r7, #8]
 80002a6:	60da      	str	r2, [r3, #12]
		fifo->head = fifo->base ;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	68da      	ldr	r2, [r3, #12]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	605a      	str	r2, [r3, #4]
		fifo->tail = fifo->base ;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	68da      	ldr	r2, [r3, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	609a      	str	r2, [r3, #8]
		fifo->length = length;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	611a      	str	r2, [r3, #16]
		fifo->counter=0;
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]

		return FIFO_NO_ERROR;
 80002c4:	2300      	movs	r3, #0
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3714      	adds	r7, #20
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr

080002d0 <FIFO_enqueue>:

Fifo_Buffer_Status FIFO_enqueue(Fifo_Buffer_t* fifo,element_t item)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
	/* fifo null*/

		if (!fifo->base || !fifo->length)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d003      	beq.n	80002ea <FIFO_enqueue+0x1a>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d101      	bne.n	80002ee <FIFO_enqueue+0x1e>
			return FIFO_NULL;
 80002ea:	2303      	movs	r3, #3
 80002ec:	e02d      	b.n	800034a <FIFO_enqueue+0x7a>
		/*fifo is full*/

		/* fifo full */
		if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	685a      	ldr	r2, [r3, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d107      	bne.n	800030a <FIFO_enqueue+0x3a>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	429a      	cmp	r2, r3
 8000304:	d101      	bne.n	800030a <FIFO_enqueue+0x3a>
			return FIFO_FULL;
 8000306:	2301      	movs	r3, #1
 8000308:	e01f      	b.n	800034a <FIFO_enqueue+0x7a>

		*(fifo->tail)=item;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	601a      	str	r2, [r3, #0]
		fifo->counter++;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	601a      	str	r2, [r3, #0]

		/*for circular fifo again */

		/* circular enqueue */
		if (fifo->tail == (((u32)fifo->base + (4*fifo->length )) - 4 ))
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	68d2      	ldr	r2, [r2, #12]
 8000324:	4611      	mov	r1, r2
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	6912      	ldr	r2, [r2, #16]
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	440a      	add	r2, r1
 800032e:	3a04      	subs	r2, #4
 8000330:	4293      	cmp	r3, r2
 8000332:	d104      	bne.n	800033e <FIFO_enqueue+0x6e>
			fifo->tail = fifo->base;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68da      	ldr	r2, [r3, #12]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	e004      	b.n	8000348 <FIFO_enqueue+0x78>
		else
			fifo->tail++;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	1d1a      	adds	r2, r3, #4
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	609a      	str	r2, [r3, #8]

		return FIFO_NO_ERROR;
 8000348:	2300      	movs	r3, #0

}
 800034a:	4618      	mov	r0, r3
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <FIFO_dequeue>:

Fifo_Buffer_Status FIFO_dequeue(Fifo_Buffer_t* fifo,element_t *item)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
		if (!fifo->base || !fifo->length)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d003      	beq.n	800036e <FIFO_dequeue+0x1a>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	691b      	ldr	r3, [r3, #16]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <FIFO_dequeue+0x1e>
			return FIFO_NULL;
 800036e:	2303      	movs	r3, #3
 8000370:	e028      	b.n	80003c4 <FIFO_dequeue+0x70>

		/* fifo empty */
		if (fifo->head == fifo->tail)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	685a      	ldr	r2, [r3, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	429a      	cmp	r2, r3
 800037c:	d101      	bne.n	8000382 <FIFO_dequeue+0x2e>
			return FIFO_EMPTY;
 800037e:	2302      	movs	r3, #2
 8000380:	e020      	b.n	80003c4 <FIFO_dequeue+0x70>



		*item = *(fifo->head);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	601a      	str	r2, [r3, #0]
		fifo->counter--;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	1e5a      	subs	r2, r3, #1
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	601a      	str	r2, [r3, #0]

		/* circular dequeue */
		if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	68d2      	ldr	r2, [r2, #12]
 800039e:	4611      	mov	r1, r2
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	6912      	ldr	r2, [r2, #16]
 80003a4:	0092      	lsls	r2, r2, #2
 80003a6:	440a      	add	r2, r1
 80003a8:	3a04      	subs	r2, #4
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d104      	bne.n	80003b8 <FIFO_dequeue+0x64>
			fifo->head = fifo->base;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	68da      	ldr	r2, [r3, #12]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	e004      	b.n	80003c2 <FIFO_dequeue+0x6e>
		else
			fifo->head++;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	1d1a      	adds	r2, r3, #4
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	605a      	str	r2, [r3, #4]

		return FIFO_NO_ERROR;
 80003c2:	2300      	movs	r3, #0

}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr
	...

080003d0 <OS_voidBubblSort>:
static TASK_Control_Block *OS_Ready[100];
static TASK_Control_Block OS_IdleTask;


static void OS_voidBubblSort(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
	u32 i,j;
	TASK_Control_Block *temp;
	for(i=0;i<(OS_Control_Block.OS_NoOfTasks-1);i++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	e032      	b.n	8000442 <OS_voidBubblSort+0x72>
	{
		for(j=0;j<(OS_Control_Block.OS_NoOfTasks-1);j++)
 80003dc:	2300      	movs	r3, #0
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	e025      	b.n	800042e <OS_voidBubblSort+0x5e>
		{
			if((OS_Control_Block.OS_Tasks[j]->TASK_Config.TASK_Priority)>(OS_Control_Block.OS_Tasks[j+1]->TASK_Config.TASK_Priority))
 80003e2:	4a1e      	ldr	r2, [pc, #120]	; (800045c <OS_voidBubblSort+0x8c>)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	3301      	adds	r3, #1
 80003f2:	491a      	ldr	r1, [pc, #104]	; (800045c <OS_voidBubblSort+0x8c>)
 80003f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d913      	bls.n	8000428 <OS_voidBubblSort+0x58>
			{
				temp = OS_Control_Block.OS_Tasks[j];
 8000400:	4a16      	ldr	r2, [pc, #88]	; (800045c <OS_voidBubblSort+0x8c>)
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000408:	607b      	str	r3, [r7, #4]
				OS_Control_Block.OS_Tasks[j]=OS_Control_Block.OS_Tasks[j+1];
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	3301      	adds	r3, #1
 800040e:	4a13      	ldr	r2, [pc, #76]	; (800045c <OS_voidBubblSort+0x8c>)
 8000410:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000414:	4911      	ldr	r1, [pc, #68]	; (800045c <OS_voidBubblSort+0x8c>)
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control_Block.OS_Tasks[j+1]=temp;
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	3301      	adds	r3, #1
 8000420:	490e      	ldr	r1, [pc, #56]	; (800045c <OS_voidBubblSort+0x8c>)
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0;j<(OS_Control_Block.OS_NoOfTasks-1);j++)
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	3301      	adds	r3, #1
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <OS_voidBubblSort+0x8c>)
 8000430:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000434:	3b01      	subs	r3, #1
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	429a      	cmp	r2, r3
 800043a:	d3d2      	bcc.n	80003e2 <OS_voidBubblSort+0x12>
	for(i=0;i<(OS_Control_Block.OS_NoOfTasks-1);i++)
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	3301      	adds	r3, #1
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <OS_voidBubblSort+0x8c>)
 8000444:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000448:	3b01      	subs	r3, #1
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	429a      	cmp	r2, r3
 800044e:	d3c5      	bcc.n	80003dc <OS_voidBubblSort+0xc>
			}
		}
	}
}
 8000450:	bf00      	nop
 8000452:	3714      	adds	r7, #20
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	2000001c 	.word	0x2000001c

08000460 <OS_voidUpdateSchedulerTable>:


static void OS_voidUpdateSchedulerTable(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
	u8 LOC_GetOneFlag = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	73fb      	strb	r3, [r7, #15]
	u8 LOC_TempPriority;
	u32 i=0;
 800046a:	2300      	movs	r3, #0
 800046c:	60bb      	str	r3, [r7, #8]
	void* LOC_pDummyData;
	//bubble sort the OS_Tasks array
	OS_voidBubblSort();
 800046e:	f7ff ffaf 	bl	80003d0 <OS_voidBubblSort>
	//empty the ready queue
	while(FIFO_dequeue(&OS_Ready_Queue,&LOC_pDummyData)!=FIFO_EMPTY);
 8000472:	bf00      	nop
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	4619      	mov	r1, r3
 8000478:	4834      	ldr	r0, [pc, #208]	; (800054c <OS_voidUpdateSchedulerTable+0xec>)
 800047a:	f7ff ff6b 	bl	8000354 <FIFO_dequeue>
 800047e:	4603      	mov	r3, r0
 8000480:	2b02      	cmp	r3, #2
 8000482:	d1f7      	bne.n	8000474 <OS_voidUpdateSchedulerTable+0x14>
	//fill the ready queue
	while(i<(OS_Control_Block.OS_NoOfTasks))
 8000484:	e056      	b.n	8000534 <OS_voidUpdateSchedulerTable+0xd4>
	{

		if((OS_Control_Block.OS_Tasks[i]->TASK_State!=TASK_Suspended)&&(LOC_GetOneFlag==0))
 8000486:	4a32      	ldr	r2, [pc, #200]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800048e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000492:	2b00      	cmp	r3, #0
 8000494:	d01b      	beq.n	80004ce <OS_voidUpdateSchedulerTable+0x6e>
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d118      	bne.n	80004ce <OS_voidUpdateSchedulerTable+0x6e>
		{
			FIFO_enqueue(&OS_Ready_Queue,(void*)OS_Control_Block.OS_Tasks[i]);
 800049c:	4a2c      	ldr	r2, [pc, #176]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a4:	4619      	mov	r1, r3
 80004a6:	4829      	ldr	r0, [pc, #164]	; (800054c <OS_voidUpdateSchedulerTable+0xec>)
 80004a8:	f7ff ff12 	bl	80002d0 <FIFO_enqueue>
			OS_Control_Block.OS_Tasks[i]->TASK_State=TASK_Ready;
 80004ac:	4a28      	ldr	r2, [pc, #160]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b4:	2203      	movs	r2, #3
 80004b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			LOC_TempPriority = OS_Control_Block.OS_Tasks[i]->TASK_Config.TASK_Priority;
 80004ba:	4a25      	ldr	r2, [pc, #148]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004c6:	73bb      	strb	r3, [r7, #14]
			LOC_GetOneFlag = 1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	73fb      	strb	r3, [r7, #15]
 80004cc:	e02f      	b.n	800052e <OS_voidUpdateSchedulerTable+0xce>
		}
		else if((LOC_GetOneFlag==1)&&(OS_Control_Block.OS_Tasks[i]->TASK_Config.TASK_Priority==LOC_TempPriority))
 80004ce:	7bfb      	ldrb	r3, [r7, #15]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d120      	bne.n	8000516 <OS_voidUpdateSchedulerTable+0xb6>
 80004d4:	4a1e      	ldr	r2, [pc, #120]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004e0:	7bba      	ldrb	r2, [r7, #14]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d117      	bne.n	8000516 <OS_voidUpdateSchedulerTable+0xb6>
		{
			if((OS_Control_Block.OS_Tasks[i]->TASK_State!=TASK_Suspended))
 80004e6:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d01b      	beq.n	800052e <OS_voidUpdateSchedulerTable+0xce>
			{
				FIFO_enqueue(&OS_Ready_Queue,(void*)OS_Control_Block.OS_Tasks[i]);
 80004f6:	4a16      	ldr	r2, [pc, #88]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004fe:	4619      	mov	r1, r3
 8000500:	4812      	ldr	r0, [pc, #72]	; (800054c <OS_voidUpdateSchedulerTable+0xec>)
 8000502:	f7ff fee5 	bl	80002d0 <FIFO_enqueue>
				OS_Control_Block.OS_Tasks[i]->TASK_State=TASK_Ready;
 8000506:	4a12      	ldr	r2, [pc, #72]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800050e:	2203      	movs	r2, #3
 8000510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			if((OS_Control_Block.OS_Tasks[i]->TASK_State!=TASK_Suspended))
 8000514:	e00b      	b.n	800052e <OS_voidUpdateSchedulerTable+0xce>
			}
		}
		else if((LOC_GetOneFlag==1)&&(OS_Control_Block.OS_Tasks[i]->TASK_Config.TASK_Priority>LOC_TempPriority))
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d108      	bne.n	800052e <OS_voidUpdateSchedulerTable+0xce>
 800051c:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000528:	7bba      	ldrb	r2, [r7, #14]
 800052a:	429a      	cmp	r2, r3
 800052c:	d309      	bcc.n	8000542 <OS_voidUpdateSchedulerTable+0xe2>
		{
			break;
		}

		i++;
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	3301      	adds	r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
	while(i<(OS_Control_Block.OS_NoOfTasks))
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <OS_voidUpdateSchedulerTable+0xf0>)
 8000536:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800053a:	68ba      	ldr	r2, [r7, #8]
 800053c:	429a      	cmp	r2, r3
 800053e:	d3a2      	bcc.n	8000486 <OS_voidUpdateSchedulerTable+0x26>
	}
}
 8000540:	e000      	b.n	8000544 <OS_voidUpdateSchedulerTable+0xe4>
			break;
 8000542:	bf00      	nop
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200001c8 	.word	0x200001c8
 8000550:	2000001c 	.word	0x2000001c

08000554 <OS_voidNextTask>:

static void OS_voidNextTask(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	if(OS_Ready_Queue.counter==0&&OS_Control_Block.OS_Current_Task->TASK_State!=TASK_Suspended)
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <OS_voidNextTask+0x90>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d114      	bne.n	800058a <OS_voidNextTask+0x36>
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <OS_voidNextTask+0x94>)
 8000562:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000566:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800056a:	2b00      	cmp	r3, #0
 800056c:	d00d      	beq.n	800058a <OS_voidNextTask+0x36>
	{
		FIFO_enqueue(&OS_Ready_Queue,(void*)OS_Control_Block.OS_Current_Task);
 800056e:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <OS_voidNextTask+0x94>)
 8000570:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000574:	4619      	mov	r1, r3
 8000576:	481b      	ldr	r0, [pc, #108]	; (80005e4 <OS_voidNextTask+0x90>)
 8000578:	f7ff feaa 	bl	80002d0 <FIFO_enqueue>
		OS_Control_Block.OS_Next_Task = OS_Control_Block.OS_Current_Task;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <OS_voidNextTask+0x94>)
 800057e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000582:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <OS_voidNextTask+0x94>)
 8000584:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			OS_Control_Block.OS_Current_Task->TASK_State=TASK_Ready;
			FIFO_enqueue(&OS_Ready_Queue,(void*)OS_Control_Block.OS_Current_Task);
		}

	}
}
 8000588:	e029      	b.n	80005de <OS_voidNextTask+0x8a>
		FIFO_dequeue(&OS_Ready_Queue,(void**)&OS_Control_Block.OS_Next_Task);
 800058a:	4918      	ldr	r1, [pc, #96]	; (80005ec <OS_voidNextTask+0x98>)
 800058c:	4815      	ldr	r0, [pc, #84]	; (80005e4 <OS_voidNextTask+0x90>)
 800058e:	f7ff fee1 	bl	8000354 <FIFO_dequeue>
		OS_Control_Block.OS_Next_Task->TASK_State = TASK_Running;
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <OS_voidNextTask+0x94>)
 8000594:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000598:	2201      	movs	r2, #1
 800059a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		if((OS_Control_Block.OS_Next_Task->TASK_Config.TASK_Priority)==(OS_Control_Block.OS_Current_Task->TASK_Config.TASK_Priority)&&(OS_Control_Block.OS_Current_Task->TASK_State!=TASK_Suspended))
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <OS_voidNextTask+0x94>)
 80005a0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005a4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <OS_voidNextTask+0x94>)
 80005aa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d113      	bne.n	80005de <OS_voidNextTask+0x8a>
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <OS_voidNextTask+0x94>)
 80005b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00c      	beq.n	80005de <OS_voidNextTask+0x8a>
			OS_Control_Block.OS_Current_Task->TASK_State=TASK_Ready;
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <OS_voidNextTask+0x94>)
 80005c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005ca:	2203      	movs	r2, #3
 80005cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			FIFO_enqueue(&OS_Ready_Queue,(void*)OS_Control_Block.OS_Current_Task);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <OS_voidNextTask+0x94>)
 80005d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d6:	4619      	mov	r1, r3
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <OS_voidNextTask+0x90>)
 80005da:	f7ff fe79 	bl	80002d0 <FIFO_enqueue>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200001c8 	.word	0x200001c8
 80005e8:	2000001c 	.word	0x2000001c
 80005ec:	200001c0 	.word	0x200001c0

080005f0 <OS_voidUpdateTasksWaitingTime>:

void OS_voidUpdateTasksWaitingTime(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	u32 i =0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
	for(i=0;i<(OS_Control_Block.OS_NoOfTasks);i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	e031      	b.n	8000664 <OS_voidUpdateTasksWaitingTime+0x74>
	{
		if(OS_Control_Block.OS_Tasks[i]->TASK_State==TASK_Suspended)
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <OS_voidUpdateTasksWaitingTime+0x88>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000608:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800060c:	2b00      	cmp	r3, #0
 800060e:	d126      	bne.n	800065e <OS_voidUpdateTasksWaitingTime+0x6e>
		{
			if(OS_Control_Block.OS_Tasks[i]->TASK_Waiting_State.TASK_Blocking_State==TASK_BLOCKING_EN)
 8000610:	4a19      	ldr	r2, [pc, #100]	; (8000678 <OS_voidUpdateTasksWaitingTime+0x88>)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800061c:	2b01      	cmp	r3, #1
 800061e:	d11e      	bne.n	800065e <OS_voidUpdateTasksWaitingTime+0x6e>
			{
				OS_Control_Block.OS_Tasks[i]->TASK_Waiting_State.TASK_Blocking_Ticks_Count--;
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <OS_voidUpdateTasksWaitingTime+0x88>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800062a:	3a01      	subs	r2, #1
 800062c:	641a      	str	r2, [r3, #64]	; 0x40
				if(OS_Control_Block.OS_Tasks[i]->TASK_Waiting_State.TASK_Blocking_Ticks_Count==0)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <OS_voidUpdateTasksWaitingTime+0x88>)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	2b00      	cmp	r3, #0
 800063a:	d110      	bne.n	800065e <OS_voidUpdateTasksWaitingTime+0x6e>
				{
					OS_Control_Block.OS_Tasks[i]->TASK_Waiting_State.TASK_Blocking_State=TASK_BLOCKING_DIS;
 800063c:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <OS_voidUpdateTasksWaitingTime+0x88>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	2200      	movs	r2, #0
 8000646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control_Block.OS_Tasks[i]->TASK_State=TASK_Waiting;
 800064a:	4a0b      	ldr	r2, [pc, #44]	; (8000678 <OS_voidUpdateTasksWaitingTime+0x88>)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000652:	2202      	movs	r2, #2
 8000654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					OS_voidSvcSetService(SVC_WAIT);
 8000658:	2002      	movs	r0, #2
 800065a:	f000 f853 	bl	8000704 <OS_voidSvcSetService>
	for(i=0;i<(OS_Control_Block.OS_NoOfTasks);i++)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <OS_voidUpdateTasksWaitingTime+0x88>)
 8000666:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	429a      	cmp	r2, r3
 800066e:	d3c7      	bcc.n	8000600 <OS_voidUpdateTasksWaitingTime+0x10>
				}
			}
		}

	}
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000001c 	.word	0x2000001c

0800067c <SysTick_Handler>:


u8 systickled=0;
void SysTick_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	systickled=1;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <SysTick_Handler+0x20>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
	OS_voidUpdateTasksWaitingTime();
 8000686:	f7ff ffb3 	bl	80005f0 <OS_voidUpdateTasksWaitingTime>
	OS_voidNextTask();
 800068a:	f7ff ff63 	bl	8000554 <OS_voidNextTask>
	CORTEXMXPORTING_voidIssuePendSv();
 800068e:	f7ff fddb 	bl	8000248 <CORTEXMXPORTING_voidIssuePendSv>
	systickled=0;
 8000692:	4b02      	ldr	r3, [pc, #8]	; (800069c <SysTick_Handler+0x20>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200003b0 	.word	0x200003b0

080006a0 <OS_voidSVC>:


void OS_voidSVC(u32 *stackframe)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	u32 service= *((u8*)((u8*)stackframe[6])-2);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3318      	adds	r3, #24
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3b02      	subs	r3, #2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	60fb      	str	r3, [r7, #12]
	switch (service)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d902      	bls.n	80006c0 <OS_voidSVC+0x20>
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d016      	beq.n	80006ec <OS_voidSVC+0x4c>
		//systick is waiting svc to updae the table then systick will run the appropriate task
		OS_voidUpdateSchedulerTable();
		break;
	}

}
 80006be:	e019      	b.n	80006f4 <OS_voidSVC+0x54>
		OS_voidUpdateSchedulerTable();
 80006c0:	f7ff fece 	bl	8000460 <OS_voidUpdateSchedulerTable>
		if(OS_Control_Block.OS_State==OS_Running)
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <OS_voidSVC+0x5c>)
 80006c6:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d111      	bne.n	80006f2 <OS_voidSVC+0x52>
			if(strcmp((char*)OS_Control_Block.OS_Current_Task->TASK_Config.TASK_Name,"IDLE_TASK")!=0)
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <OS_voidSVC+0x5c>)
 80006d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006d4:	490a      	ldr	r1, [pc, #40]	; (8000700 <OS_voidSVC+0x60>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd4a 	bl	8000170 <strcmp>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <OS_voidSVC+0x52>
				OS_voidNextTask();
 80006e2:	f7ff ff37 	bl	8000554 <OS_voidNextTask>
				CORTEXMXPORTING_voidIssuePendSv();
 80006e6:	f7ff fdaf 	bl	8000248 <CORTEXMXPORTING_voidIssuePendSv>
		break;
 80006ea:	e002      	b.n	80006f2 <OS_voidSVC+0x52>
		OS_voidUpdateSchedulerTable();
 80006ec:	f7ff feb8 	bl	8000460 <OS_voidUpdateSchedulerTable>
		break;
 80006f0:	e000      	b.n	80006f4 <OS_voidSVC+0x54>
		break;
 80006f2:	bf00      	nop
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000001c 	.word	0x2000001c
 8000700:	08000e84 	.word	0x08000e84

08000704 <OS_voidSvcSetService>:


/*still Thread mode*/
static void OS_voidSvcSetService(u32 Copy_ServiceId)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	switch(Copy_ServiceId)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d006      	beq.n	8000720 <OS_voidSvcSetService+0x1c>
 8000712:	2b01      	cmp	r3, #1
 8000714:	d302      	bcc.n	800071c <OS_voidSvcSetService+0x18>
 8000716:	2b02      	cmp	r3, #2
 8000718:	d004      	beq.n	8000724 <OS_voidSvcSetService+0x20>
	case SVC_WAIT:
		__asm("SVC #0x02");
		break;
	}

}
 800071a:	e005      	b.n	8000728 <OS_voidSvcSetService+0x24>
		__asm("SVC #0x00");
 800071c:	df00      	svc	0
		break;
 800071e:	e003      	b.n	8000728 <OS_voidSvcSetService+0x24>
		__asm("SVC #0x01");
 8000720:	df01      	svc	1
		break;
 8000722:	e001      	b.n	8000728 <OS_voidSvcSetService+0x24>
		__asm("SVC #0x02");
 8000724:	df02      	svc	2
		break;
 8000726:	bf00      	nop
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
	...

08000734 <PendSV_Handler>:
{
	/************************************************/
	/******save the context of the current task******/
	/************************************************/
	/*1-get the psp of the current task*/
	OS_GET_PSP_ADDRESS((OS_Control_Block.OS_Current_Task->_C_TASK_Psp));
 8000734:	4b6f      	ldr	r3, [pc, #444]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000736:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800073a:	f3ef 8009 	mrs	r0, PSP
 800073e:	4602      	mov	r2, r0
 8000740:	635a      	str	r2, [r3, #52]	; 0x34
	/*2-context saveof the register that haven't been saved in the context (r4....r11)*/
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp--;
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000744:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800074a:	3a04      	subs	r2, #4
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm("mov %0,r4":"=r"(*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 800074e:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000750:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000756:	4622      	mov	r2, r4
 8000758:	601a      	str	r2, [r3, #0]
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp--;
 800075a:	4b66      	ldr	r3, [pc, #408]	; (80008f4 <PendSV_Handler+0x1c0>)
 800075c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000762:	3a04      	subs	r2, #4
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0,r5":"=r"(*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 8000766:	4b63      	ldr	r3, [pc, #396]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000768:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800076c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800076e:	462a      	mov	r2, r5
 8000770:	601a      	str	r2, [r3, #0]
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp--;
 8000772:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000774:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077a:	3a04      	subs	r2, #4
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0,r6":"=r"(*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 800077e:	4b5d      	ldr	r3, [pc, #372]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000780:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000786:	4632      	mov	r2, r6
 8000788:	601a      	str	r2, [r3, #0]
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp--;
 800078a:	4b5a      	ldr	r3, [pc, #360]	; (80008f4 <PendSV_Handler+0x1c0>)
 800078c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000792:	3a04      	subs	r2, #4
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0,r7":"=r"(*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 8000796:	4b57      	ldr	r3, [pc, #348]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000798:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800079c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079e:	463a      	mov	r2, r7
 80007a0:	601a      	str	r2, [r3, #0]
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp--;
 80007a2:	4b54      	ldr	r3, [pc, #336]	; (80008f4 <PendSV_Handler+0x1c0>)
 80007a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007aa:	3a04      	subs	r2, #4
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0,r8":"=r"(*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 80007ae:	4b51      	ldr	r3, [pc, #324]	; (80008f4 <PendSV_Handler+0x1c0>)
 80007b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b6:	4642      	mov	r2, r8
 80007b8:	601a      	str	r2, [r3, #0]
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp--;
 80007ba:	4b4e      	ldr	r3, [pc, #312]	; (80008f4 <PendSV_Handler+0x1c0>)
 80007bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c2:	3a04      	subs	r2, #4
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0,r9":"=r"(*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 80007c6:	4b4b      	ldr	r3, [pc, #300]	; (80008f4 <PendSV_Handler+0x1c0>)
 80007c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	464a      	mov	r2, r9
 80007d0:	601a      	str	r2, [r3, #0]
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp--;
 80007d2:	4b48      	ldr	r3, [pc, #288]	; (80008f4 <PendSV_Handler+0x1c0>)
 80007d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007da:	3a04      	subs	r2, #4
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0,r10":"=r"(*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 80007de:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <PendSV_Handler+0x1c0>)
 80007e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	4652      	mov	r2, sl
 80007e8:	601a      	str	r2, [r3, #0]
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp--;
 80007ea:	4b42      	ldr	r3, [pc, #264]	; (80008f4 <PendSV_Handler+0x1c0>)
 80007ec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007f2:	3a04      	subs	r2, #4
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov %0,r11":"=r"(*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 80007f6:	4b3f      	ldr	r3, [pc, #252]	; (80008f4 <PendSV_Handler+0x1c0>)
 80007f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fe:	465a      	mov	r2, fp
 8000800:	601a      	str	r2, [r3, #0]

	if(OS_Control_Block.OS_Next_Task!=NULL)
 8000802:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000804:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000808:	2b00      	cmp	r3, #0
 800080a:	d009      	beq.n	8000820 <PendSV_Handler+0xec>
	{
		OS_Control_Block.OS_Current_Task =  OS_Control_Block.OS_Next_Task;
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <PendSV_Handler+0x1c0>)
 800080e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000812:	4a38      	ldr	r2, [pc, #224]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000814:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control_Block.OS_Next_Task=NULL;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <PendSV_Handler+0x1c0>)
 800081a:	2200      	movs	r2, #0
 800081c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}
	/***************************************************/
	/******restore the context of the next task*********/
	/***************************************************/
	/*1-*/
	__asm volatile("mov r11,%0 " : : "r" (*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 8000820:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000822:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	469b      	mov	fp, r3
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp++ ;
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <PendSV_Handler+0x1c0>)
 800082e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000834:	3204      	adds	r2, #4
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r10,%0 " : : "r" (*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <PendSV_Handler+0x1c0>)
 800083a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800083e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	469a      	mov	sl, r3
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp++ ;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000846:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800084a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084c:	3204      	adds	r2, #4
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r9,%0 " : : "r" (*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000852:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4699      	mov	r9, r3
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp++ ;
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <PendSV_Handler+0x1c0>)
 800085e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000864:	3204      	adds	r2, #4
 8000866:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r8,%0 " : : "r" (*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <PendSV_Handler+0x1c0>)
 800086a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800086e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4698      	mov	r8, r3
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp++ ;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000876:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800087a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087c:	3204      	adds	r2, #4
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r7,%0 " : : "r" (*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <PendSV_Handler+0x1c0>)
 8000882:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461f      	mov	r7, r3
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp++ ;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <PendSV_Handler+0x1c0>)
 800088e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000894:	3204      	adds	r2, #4
 8000896:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r6,%0 " : : "r" (*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <PendSV_Handler+0x1c0>)
 800089a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800089e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	461e      	mov	r6, r3
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp++ ;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <PendSV_Handler+0x1c0>)
 80008a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ac:	3204      	adds	r2, #4
 80008ae:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r5,%0 " : : "r" (*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <PendSV_Handler+0x1c0>)
 80008b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	461d      	mov	r5, r3
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp++ ;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <PendSV_Handler+0x1c0>)
 80008be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c4:	3204      	adds	r2, #4
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
	__asm volatile("mov r4,%0 " : : "r" (*(OS_Control_Block.OS_Current_Task->_C_TASK_Psp)));
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <PendSV_Handler+0x1c0>)
 80008ca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	461c      	mov	r4, r3
	OS_Control_Block.OS_Current_Task->_C_TASK_Psp++ ;
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <PendSV_Handler+0x1c0>)
 80008d6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008dc:	3204      	adds	r2, #4
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
	OS_SET_PSP_ADDRESS((OS_Control_Block.OS_Current_Task->_C_TASK_Psp));
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <PendSV_Handler+0x1c0>)
 80008e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e8:	4618      	mov	r0, r3
 80008ea:	f380 8809 	msr	PSP, r0

	__asm volatile("BX LR");
 80008ee:	4770      	bx	lr
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	2000001c 	.word	0x2000001c

080008f8 <OS_voidIdleTask>:

u8 IDLEled;
static void OS_voidIdleTask(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
	IDLEled=0;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <OS_voidIdleTask+0x1c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		IDLEled^=1;
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <OS_voidIdleTask+0x1c>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	f083 0301 	eor.w	r3, r3, #1
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b01      	ldr	r3, [pc, #4]	; (8000914 <OS_voidIdleTask+0x1c>)
 800090e:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 8000910:	bf20      	wfe
		IDLEled^=1;
 8000912:	e7f6      	b.n	8000902 <OS_voidIdleTask+0xa>
 8000914:	200003c4 	.word	0x200003c4

08000918 <OS_voidCreateMainStack>:
	}

}

static void OS_voidCreateMainStack(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	OS_Control_Block._S_OS_Msp =(u32)&_estack;
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <OS_voidCreateMainStack+0x34>)
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <OS_voidCreateMainStack+0x38>)
 8000920:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control_Block._E_OS_Msp = (OS_Control_Block._S_OS_Msp - MAIN_STACK_SIZE);
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <OS_voidCreateMainStack+0x38>)
 8000926:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800092a:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <OS_voidCreateMainStack+0x38>)
 8000930:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	OS_Control_Block.OS_Locator = (OS_Control_Block._E_OS_Msp - 8);
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <OS_voidCreateMainStack+0x38>)
 8000936:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800093a:	3b08      	subs	r3, #8
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <OS_voidCreateMainStack+0x38>)
 800093e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20002800 	.word	0x20002800
 8000950:	2000001c 	.word	0x2000001c

08000954 <OS_voidCreateTaskStack>:




static void OS_voidCreateTaskStack(TASK_Control_Block* Copy_pTcb)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	 * r1
	 * r0
	 *====
	 *r5, r6 , r7 ,r8 ,r9, r10,r11 (Saved/Restore)Manual
	 */
	Copy_pTcb->_C_TASK_Psp =(u32*)Copy_pTcb->_S_TASK_Psp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	635a      	str	r2, [r3, #52]	; 0x34

	Copy_pTcb->_C_TASK_Psp--;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096a:	1f1a      	subs	r2, r3, #4
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	635a      	str	r2, [r3, #52]	; 0x34
	/*push dummy value for XPSR*/
	*(Copy_pTcb->_C_TASK_Psp) = 0x01000000; /*T bit should be 1 (thumb2)*/
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000978:	601a      	str	r2, [r3, #0]

	Copy_pTcb->_C_TASK_Psp--;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800097e:	1f1a      	subs	r2, r3, #4
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
	/*push pc which is the pointer to the task*/
	*(Copy_pTcb->_C_TASK_Psp) =(u32) Copy_pTcb->TASK_Config.TASK_Entry;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6a1a      	ldr	r2, [r3, #32]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800098c:	601a      	str	r2, [r3, #0]

	Copy_pTcb->_C_TASK_Psp--;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000992:	1f1a      	subs	r2, r3, #4
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
	/*push lr with dummy value*/
	*(Copy_pTcb->_C_TASK_Psp) = 0xFFFFFFFD;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099c:	f06f 0202 	mvn.w	r2, #2
 80009a0:	601a      	str	r2, [r3, #0]

	/*push other registers values with 0*/
	for (int  j=0 ; j< 13 ; j++ )
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e00b      	b.n	80009c0 <OS_voidCreateTaskStack+0x6c>
	{
		Copy_pTcb->_C_TASK_Psp--;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ac:	1f1a      	subs	r2, r3, #4
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	635a      	str	r2, [r3, #52]	; 0x34
		*(Copy_pTcb->_C_TASK_Psp) = 0;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
	for (int  j=0 ; j< 13 ; j++ )
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3301      	adds	r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2b0c      	cmp	r3, #12
 80009c4:	ddf0      	ble.n	80009a8 <OS_voidCreateTaskStack+0x54>
	}

}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <OS_voidActivateTask>:


OS_Error_t OS_voidActivateTask(TASK_Control_Block* Copy_pTcb)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	OS_Error_t OS_voidActivateTaskState = OS_NO_ERROR;
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
	if(Copy_pTcb->TASK_State!=TASK_Suspended)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d002      	beq.n	80009ec <OS_voidActivateTask+0x1c>
	{
		OS_voidActivateTaskState = OS_TASK_ALREADY_ACTIVE;
 80009e6:	2303      	movs	r3, #3
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e006      	b.n	80009fa <OS_voidActivateTask+0x2a>
	}
	else
	{
		Copy_pTcb->TASK_State =TASK_Waiting;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2202      	movs	r2, #2
 80009f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		OS_voidSvcSetService(SVC_ACTIVATE);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff fe85 	bl	8000704 <OS_voidSvcSetService>
	}

	return OS_voidActivateTaskState;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <OS_voidTerminateTask>:


OS_Error_t OS_voidTerminateTask(TASK_Control_Block* Copy_pTcb)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	OS_Error_t OS_voidTerminateTaskState = OS_NO_ERROR;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]
	if(Copy_pTcb->TASK_State==TASK_Suspended)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d102      	bne.n	8000a20 <OS_voidTerminateTask+0x1c>
	{
		OS_voidTerminateTaskState = OS_TASK_ALREADY_TERMINATED;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	e006      	b.n	8000a2e <OS_voidTerminateTask+0x2a>
	}
	else
	{
		Copy_pTcb->TASK_State =TASK_Suspended;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		OS_voidSvcSetService(SVC_TERMINATE);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff fe6b 	bl	8000704 <OS_voidSvcSetService>
	}


	return  OS_voidTerminateTaskState;
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <OS_voidCreateTask>:
	Copy_pTcb->TASK_Waiting_State.TASK_Blocking_Ticks_Count = Copy_NumberOfMs;
	OS_voidSvcSetService(SVC_TERMINATE);
}

OS_Error_t OS_voidCreateTask(TASK_Control_Block* Copy_pTcb)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	OS_Error_t OS_voidCreateTaskState = OS_NO_ERROR;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
	/*check if exceed the stack size*/
	if((OS_Control_Block.OS_Locator - Copy_pTcb->TASK_Config.TASK_Stack_Size) < (u32)&_eheap)
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <OS_voidCreateTask+0x78>)
 8000a46:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <OS_voidCreateTask+0x7c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d202      	bcs.n	8000a5c <OS_voidCreateTask+0x24>
	{
		OS_voidCreateTaskState = OS_TASK_EXCEEDED_STACK_SIZE;
 8000a56:	2302      	movs	r3, #2
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e023      	b.n	8000aa4 <OS_voidCreateTask+0x6c>
		 *	_OS_Locator
		 */


		/*set start and end of psp */
		Copy_pTcb->_S_TASK_Psp = OS_Control_Block.OS_Locator;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <OS_voidCreateTask+0x78>)
 8000a5e:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
		Copy_pTcb->_E_TASK_Psp = (Copy_pTcb->_S_TASK_Psp - Copy_pTcb->TASK_Config.TASK_Stack_Size);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6e:	1ad2      	subs	r2, r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	631a      	str	r2, [r3, #48]	; 0x30

		/*update the locator with the new position*/
		OS_Control_Block.OS_Locator = (Copy_pTcb->_E_TASK_Psp - 8);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	3b08      	subs	r3, #8
 8000a7a:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <OS_voidCreateTask+0x78>)
 8000a7c:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

		/*init psp of the task*/
		OS_voidCreateTaskStack(Copy_pTcb);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff67 	bl	8000954 <OS_voidCreateTaskStack>
		Copy_pTcb->TASK_State = TASK_Suspended;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		/*add the task to scheduler table*/
		OS_Control_Block.OS_Tasks[OS_Control_Block.OS_NoOfTasks++] = Copy_pTcb;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <OS_voidCreateTask+0x78>)
 8000a90:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	4906      	ldr	r1, [pc, #24]	; (8000ab0 <OS_voidCreateTask+0x78>)
 8000a98:	f8c1 219c 	str.w	r2, [r1, #412]	; 0x19c
 8000a9c:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <OS_voidCreateTask+0x78>)
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	return OS_voidCreateTaskState;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000001c 	.word	0x2000001c
 8000ab4:	20000b18 	.word	0x20000b18

08000ab8 <OS_voidStart>:




void OS_voidStart(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	OS_Control_Block.OS_State=OS_Running;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <OS_voidStart+0x5c>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	OS_Control_Block.OS_Current_Task=&OS_IdleTask;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <OS_voidStart+0x5c>)
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <OS_voidStart+0x60>)
 8000ac8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	OS_voidActivateTask(&OS_IdleTask);
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <OS_voidStart+0x60>)
 8000ace:	f7ff ff7f 	bl	80009d0 <OS_voidActivateTask>

	/*after 1ms generate systick interrupt*/
	CORTEXMXPORTING_voidStartSystick(8000);
 8000ad2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000ad6:	f7ff fbc5 	bl	8000264 <CORTEXMXPORTING_voidStartSystick>
	OS_SET_PSP_ADDRESS(OS_Control_Block.OS_Current_Task->_C_TASK_Psp);
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <OS_voidStart+0x5c>)
 8000adc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f380 8809 	msr	PSP, r0
	OS_SP_SHADOWS_PSP;
 8000ae8:	f3ef 8014 	mrs	r0, CONTROL
 8000aec:	f04f 0102 	mov.w	r1, #2
 8000af0:	ea40 0001 	orr.w	r0, r0, r1
 8000af4:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_UNPRIVILIGE_MODE;
 8000af8:	f3ef 8314 	mrs	r3, CONTROL
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	f383 8814 	msr	CONTROL, r3
	OS_Control_Block.OS_Current_Task->TASK_Config.TASK_Entry();
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <OS_voidStart+0x5c>)
 8000b06:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4798      	blx	r3
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000001c 	.word	0x2000001c
 8000b18:	2000036c 	.word	0x2000036c

08000b1c <OS_Init>:



OS_Error_t OS_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	OS_Error_t OS_Init_State = OS_NO_ERROR;
 8000b22:	2300      	movs	r3, #0
 8000b24:	71fb      	strb	r3, [r7, #7]

	/*init hw*/
	CORTEXMXPORTING_voidInit();
 8000b26:	f7ff fba8 	bl	800027a <CORTEXMXPORTING_voidInit>

	/*init os mode with suspended*/
	OS_Control_Block.OS_State = OS_Suspended;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <OS_Init+0x68>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	/*init msp for os*/
	OS_voidCreateMainStack();
 8000b32:	f7ff fef1 	bl	8000918 <OS_voidCreateMainStack>

	/*Create Ready Queue*/
	if(FIFO_init(&OS_Ready_Queue,(void*)OS_Ready,100)!=FIFO_NO_ERROR)
 8000b36:	2264      	movs	r2, #100	; 0x64
 8000b38:	4913      	ldr	r1, [pc, #76]	; (8000b88 <OS_Init+0x6c>)
 8000b3a:	4814      	ldr	r0, [pc, #80]	; (8000b8c <OS_Init+0x70>)
 8000b3c:	f7ff fba6 	bl	800028c <FIFO_init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <OS_Init+0x2e>
	{
		OS_Init_State = OS_QUEUE_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	71fb      	strb	r3, [r7, #7]
	}

	/*Config Idle Task*/
	strcpy((char*)OS_IdleTask.TASK_Config.TASK_Name,"IDLE_TASK");
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <OS_Init+0x74>)
 8000b4c:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <OS_Init+0x78>)
 8000b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b50:	c303      	stmia	r3!, {r0, r1}
 8000b52:	801a      	strh	r2, [r3, #0]
	OS_IdleTask.TASK_Config.TASK_Priority=255;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <OS_Init+0x74>)
 8000b56:	22ff      	movs	r2, #255	; 0xff
 8000b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	OS_IdleTask.TASK_Config.TASK_Stack_Size=300;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <OS_Init+0x74>)
 8000b5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24
	OS_IdleTask.TASK_Config.TASK_Entry=OS_voidIdleTask;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <OS_Init+0x74>)
 8000b66:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <OS_Init+0x7c>)
 8000b68:	621a      	str	r2, [r3, #32]
	OS_Init_State+=OS_voidCreateTask(&OS_IdleTask);
 8000b6a:	4809      	ldr	r0, [pc, #36]	; (8000b90 <OS_Init+0x74>)
 8000b6c:	f7ff ff64 	bl	8000a38 <OS_voidCreateTask>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4413      	add	r3, r2
 8000b78:	71fb      	strb	r3, [r7, #7]

	return OS_Init_State;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000001c 	.word	0x2000001c
 8000b88:	200001dc 	.word	0x200001dc
 8000b8c:	200001c8 	.word	0x200001c8
 8000b90:	2000036c 	.word	0x2000036c
 8000b94:	08000e84 	.word	0x08000e84
 8000b98:	080008f9 	.word	0x080008f9

08000b9c <TASK1>:
MUTEX_Control_t MUTEX1;
int arr[]={1,2,4};
u8 LED1,LED2,LED3,LED4;
TASK_Control_Block T1,T2,T3,T4;
void TASK1()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	{

		static u32 c2 =0;
		while(1)
		{
			if(c2==100)
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <TASK1+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b64      	cmp	r3, #100	; 0x64
 8000ba6:	d103      	bne.n	8000bb0 <TASK1+0x14>
			{
				OS_voidActivateTask(&T2);
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <TASK1+0x44>)
 8000baa:	f7ff ff11 	bl	80009d0 <OS_voidActivateTask>
 8000bae:	e006      	b.n	8000bbe <TASK1+0x22>
			}
			else if(c2==200)
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <TASK1+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2bc8      	cmp	r3, #200	; 0xc8
 8000bb6:	d102      	bne.n	8000bbe <TASK1+0x22>
			{
				c2=0;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <TASK1+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
			}
			c2++;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <TASK1+0x40>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <TASK1+0x40>)
 8000bc6:	6013      	str	r3, [r2, #0]
			LED1^=1;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <TASK1+0x48>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f083 0301 	eor.w	r3, r3, #1
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <TASK1+0x48>)
 8000bd4:	701a      	strb	r2, [r3, #0]
			__asm("NOP");
 8000bd6:	bf00      	nop
			if(c2==100)
 8000bd8:	e7e2      	b.n	8000ba0 <TASK1+0x4>
 8000bda:	bf00      	nop
 8000bdc:	200003b4 	.word	0x200003b4
 8000be0:	200003c8 	.word	0x200003c8
 8000be4:	20000480 	.word	0x20000480

08000be8 <TASK2>:

		}
	}
}
void TASK2()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	static u32 c2 =0;
	while(1)
	{
		c2++;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <TASK2+0x44>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <TASK2+0x44>)
 8000bf4:	6013      	str	r3, [r2, #0]
		LED2^=1;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <TASK2+0x48>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f083 0301 	eor.w	r3, r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <TASK2+0x48>)
 8000c02:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8000c04:	bf00      	nop
		if(c2==100)
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <TASK2+0x44>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b64      	cmp	r3, #100	; 0x64
 8000c0c:	d102      	bne.n	8000c14 <TASK2+0x2c>
		{
			OS_voidActivateTask(&T3);
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <TASK2+0x4c>)
 8000c10:	f7ff fede 	bl	80009d0 <OS_voidActivateTask>
		}
		if(c2==200)
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <TASK2+0x44>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2bc8      	cmp	r3, #200	; 0xc8
 8000c1a:	d1e7      	bne.n	8000bec <TASK2+0x4>
		{
			c2=0;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <TASK2+0x44>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
			OS_voidTerminateTask(&T2);
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <TASK2+0x50>)
 8000c24:	f7ff feee 	bl	8000a04 <OS_voidTerminateTask>
		c2++;
 8000c28:	e7e0      	b.n	8000bec <TASK2+0x4>
 8000c2a:	bf00      	nop
 8000c2c:	200003b8 	.word	0x200003b8
 8000c30:	20000510 	.word	0x20000510
 8000c34:	20000484 	.word	0x20000484
 8000c38:	200003c8 	.word	0x200003c8

08000c3c <TASK3>:


	}
}
void TASK3()
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	static u32 c2 =0;
	while(1)
	{
		c2++;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <TASK3+0x44>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <TASK3+0x44>)
 8000c48:	6013      	str	r3, [r2, #0]
		LED3^=1;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <TASK3+0x48>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f083 0301 	eor.w	r3, r3, #1
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <TASK3+0x48>)
 8000c56:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8000c58:	bf00      	nop
		if(c2==100)
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <TASK3+0x44>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b64      	cmp	r3, #100	; 0x64
 8000c60:	d102      	bne.n	8000c68 <TASK3+0x2c>
		{
			OS_voidActivateTask(&T4);
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <TASK3+0x4c>)
 8000c64:	f7ff feb4 	bl	80009d0 <OS_voidActivateTask>
		}
		if(c2==200)
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <TASK3+0x44>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2bc8      	cmp	r3, #200	; 0xc8
 8000c6e:	d1e7      	bne.n	8000c40 <TASK3+0x4>
		{
			c2=0;
 8000c70:	4b03      	ldr	r3, [pc, #12]	; (8000c80 <TASK3+0x44>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
			OS_voidTerminateTask(&T3);
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <TASK3+0x50>)
 8000c78:	f7ff fec4 	bl	8000a04 <OS_voidTerminateTask>
		c2++;
 8000c7c:	e7e0      	b.n	8000c40 <TASK3+0x4>
 8000c7e:	bf00      	nop
 8000c80:	200003bc 	.word	0x200003bc
 8000c84:	200004c8 	.word	0x200004c8
 8000c88:	2000040c 	.word	0x2000040c
 8000c8c:	20000484 	.word	0x20000484

08000c90 <TASK4>:

	}
}

void TASK4()
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	static u32 c2 =0;
	while(1)
	{
		c2++;
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <TASK4+0x34>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <TASK4+0x34>)
 8000c9c:	6013      	str	r3, [r2, #0]
		LED4^=1;
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <TASK4+0x38>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <TASK4+0x38>)
 8000caa:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8000cac:	bf00      	nop
		if(c2==200)
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <TASK4+0x34>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2bc8      	cmp	r3, #200	; 0xc8
 8000cb4:	d1ee      	bne.n	8000c94 <TASK4+0x4>
		{
			c2=0;
 8000cb6:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <TASK4+0x34>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
			OS_voidTerminateTask(&T4);
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <TASK4+0x3c>)
 8000cbe:	f7ff fea1 	bl	8000a04 <OS_voidTerminateTask>
		c2++;
 8000cc2:	e7e7      	b.n	8000c94 <TASK4+0x4>
 8000cc4:	200003c0 	.word	0x200003c0
 8000cc8:	20000511 	.word	0x20000511
 8000ccc:	2000040c 	.word	0x2000040c

08000cd0 <main>:
}



int main()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	OS_Init();
 8000cd4:	f7ff ff22 	bl	8000b1c <OS_Init>


	T1.TASK_Config.TASK_Priority=4;
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <main+0xd4>)
 8000cda:	2204      	movs	r2, #4
 8000cdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	T1.TASK_Config.TASK_Stack_Size=300;
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <main+0xd4>)
 8000ce2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
	T1.TASK_Config.TASK_AutoStart=0;
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <main+0xd4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	T1.TASK_Config.TASK_Entry = TASK1;
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <main+0xd4>)
 8000cf2:	4a2d      	ldr	r2, [pc, #180]	; (8000da8 <main+0xd8>)
 8000cf4:	621a      	str	r2, [r3, #32]

	strcpy((char*)T2.TASK_Config.TASK_Name,"T2");
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <main+0xdc>)
 8000cf8:	4a2d      	ldr	r2, [pc, #180]	; (8000db0 <main+0xe0>)
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	8019      	strh	r1, [r3, #0]
 8000d00:	3302      	adds	r3, #2
 8000d02:	0c12      	lsrs	r2, r2, #16
 8000d04:	701a      	strb	r2, [r3, #0]
	T2.TASK_Config.TASK_Priority=3;
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <main+0xdc>)
 8000d08:	2203      	movs	r2, #3
 8000d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	T2.TASK_Config.TASK_Stack_Size=300;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <main+0xdc>)
 8000d10:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24
	T2.TASK_Config.TASK_AutoStart=0;
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <main+0xdc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	T2.TASK_Config.TASK_Entry = TASK2;
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <main+0xdc>)
 8000d20:	4a24      	ldr	r2, [pc, #144]	; (8000db4 <main+0xe4>)
 8000d22:	621a      	str	r2, [r3, #32]

	strcpy((char*)T3.TASK_Config.TASK_Name,"T3");
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <main+0xe8>)
 8000d26:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <main+0xec>)
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	8019      	strh	r1, [r3, #0]
 8000d2e:	3302      	adds	r3, #2
 8000d30:	0c12      	lsrs	r2, r2, #16
 8000d32:	701a      	strb	r2, [r3, #0]
	T3.TASK_Config.TASK_Priority=2;
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <main+0xe8>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	T3.TASK_Config.TASK_Stack_Size=300;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <main+0xe8>)
 8000d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
	T3.TASK_Config.TASK_AutoStart=0;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <main+0xe8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	T3.TASK_Config.TASK_Entry = TASK3;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <main+0xe8>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <main+0xf0>)
 8000d50:	621a      	str	r2, [r3, #32]

	strcpy((char*)T4.TASK_Config.TASK_Name,"T4");
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <main+0xf4>)
 8000d54:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <main+0xf8>)
 8000d56:	6812      	ldr	r2, [r2, #0]
 8000d58:	4611      	mov	r1, r2
 8000d5a:	8019      	strh	r1, [r3, #0]
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	0c12      	lsrs	r2, r2, #16
 8000d60:	701a      	strb	r2, [r3, #0]
	T4.TASK_Config.TASK_Priority=1;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <main+0xf4>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	T4.TASK_Config.TASK_Stack_Size=300;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <main+0xf4>)
 8000d6c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
	T4.TASK_Config.TASK_AutoStart=0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <main+0xf4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	T4.TASK_Config.TASK_Entry = TASK4;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <main+0xf4>)
 8000d7c:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <main+0xfc>)
 8000d7e:	621a      	str	r2, [r3, #32]

	OS_voidCreateTask(&T1);
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <main+0xd4>)
 8000d82:	f7ff fe59 	bl	8000a38 <OS_voidCreateTask>
	OS_voidCreateTask(&T2);
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <main+0xdc>)
 8000d88:	f7ff fe56 	bl	8000a38 <OS_voidCreateTask>
	OS_voidCreateTask(&T3);
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <main+0xe8>)
 8000d8e:	f7ff fe53 	bl	8000a38 <OS_voidCreateTask>
	OS_voidCreateTask(&T4);
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <main+0xf4>)
 8000d94:	f7ff fe50 	bl	8000a38 <OS_voidCreateTask>
	OS_voidActivateTask(&T1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <main+0xd4>)
 8000d9a:	f7ff fe19 	bl	80009d0 <OS_voidActivateTask>

	OS_voidStart();
 8000d9e:	f7ff fe8b 	bl	8000ab8 <OS_voidStart>
	while(1);
 8000da2:	e7fe      	b.n	8000da2 <main+0xd2>
 8000da4:	200004cc 	.word	0x200004cc
 8000da8:	08000b9d 	.word	0x08000b9d
 8000dac:	200003c8 	.word	0x200003c8
 8000db0:	08000e90 	.word	0x08000e90
 8000db4:	08000be9 	.word	0x08000be9
 8000db8:	20000484 	.word	0x20000484
 8000dbc:	08000e94 	.word	0x08000e94
 8000dc0:	08000c3d 	.word	0x08000c3d
 8000dc4:	2000040c 	.word	0x2000040c
 8000dc8:	08000e98 	.word	0x08000e98
 8000dcc:	08000c91 	.word	0x08000c91

08000dd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dd2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dd4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dfe:	f000 f811 	bl	8000e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e02:	f7ff ff65 	bl	8000cd0 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   r0, =_estack
 8000e08:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e14:	08000ea4 	.word	0x08000ea4
  ldr r2, =_sbss
 8000e18:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e1c:	20000514 	.word	0x20000514

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <__libc_init_array>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	2500      	movs	r5, #0
 8000e28:	4e0c      	ldr	r6, [pc, #48]	; (8000e5c <__libc_init_array+0x38>)
 8000e2a:	4c0d      	ldr	r4, [pc, #52]	; (8000e60 <__libc_init_array+0x3c>)
 8000e2c:	1ba4      	subs	r4, r4, r6
 8000e2e:	10a4      	asrs	r4, r4, #2
 8000e30:	42a5      	cmp	r5, r4
 8000e32:	d109      	bne.n	8000e48 <__libc_init_array+0x24>
 8000e34:	f000 f81a 	bl	8000e6c <_init>
 8000e38:	2500      	movs	r5, #0
 8000e3a:	4e0a      	ldr	r6, [pc, #40]	; (8000e64 <__libc_init_array+0x40>)
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <__libc_init_array+0x44>)
 8000e3e:	1ba4      	subs	r4, r4, r6
 8000e40:	10a4      	asrs	r4, r4, #2
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	d105      	bne.n	8000e52 <__libc_init_array+0x2e>
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
 8000e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e4c:	4798      	blx	r3
 8000e4e:	3501      	adds	r5, #1
 8000e50:	e7ee      	b.n	8000e30 <__libc_init_array+0xc>
 8000e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e56:	4798      	blx	r3
 8000e58:	3501      	adds	r5, #1
 8000e5a:	e7f2      	b.n	8000e42 <__libc_init_array+0x1e>
 8000e5c:	08000e9c 	.word	0x08000e9c
 8000e60:	08000e9c 	.word	0x08000e9c
 8000e64:	08000e9c 	.word	0x08000e9c
 8000e68:	08000ea0 	.word	0x08000ea0

08000e6c <_init>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	bf00      	nop
 8000e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e72:	bc08      	pop	{r3}
 8000e74:	469e      	mov	lr, r3
 8000e76:	4770      	bx	lr

08000e78 <_fini>:
 8000e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7a:	bf00      	nop
 8000e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7e:	bc08      	pop	{r3}
 8000e80:	469e      	mov	lr, r3
 8000e82:	4770      	bx	lr
